unbind-key -a

# My prefix is Ctrl-s
set -g prefix 'C-s'

set-option -g default-shell /bin/zsh

bind          '(' switch-client -p
bind          ')' switch-client -n
bind          '!' break-pane
bind          '{' swap-pane -U
bind          '}' swap-pane -D
bind          '#' list-buffers
bind          '$' command-prompt 'rename-session %%'
bind          ',' command-prompt 'rename-window %%'
bind          '1' select-window -t :1
bind          '2' select-window -t :2
bind          '3' select-window -t :3
bind          '4' select-window -t :4
bind          '5' select-window -t :5
bind          '6' select-window -t :6
bind          '7' select-window -t :7
bind          '8' select-window -t :8
bind          '9' select-window -t :9
bind          ':' command-prompt
bind          ';' last-pane
bind          '?' list-keys
bind          '[' copy-mode
bind          ']' paste-buffer
bind          'b' choose-buffer
bind          'c' new-window -c "#{pane_current_path}"
bind          'd' detach-client
bind          'h' select-pane -L
bind          'j' select-pane -D
bind          'k' select-pane -U
bind          'l' select-pane -R
bind          'o' select-pane -t :.+
bind          'p' display-panes -d 0
bind          'r' source-file ~/.tmux.conf \; display '~/.tmux.conf sourced'
bind          's' split-window -v -c "#{pane_current_path}"
bind          't' clock-mode
bind          'v' split-window -h -c "#{pane_current_path}"
bind          'w' choose-window
bind          'x' confirm-before -p "kill-pane #P? (y/n)" kill-pane
bind          'z' resize-pane -Z
bind          Tab last-window # move to last active window
bind        Enter copy-mode # enter copy mode
bind        Space next-layout
bind -n       C-l send-keys C-l \; run 'sleep 0.05 && tmux clear-history'
bind -r      M-Up resize-pane -U 5
bind -r    M-Down resize-pane -D 5
bind -r    M-Left resize-pane -L 5
bind -r   M-Right resize-pane -R 5

# start window numbers at 1
set -g base-index 1

# Automatically set window title
setw -g automatic-rename on
setw -g status-interval 5
setw -g automatic-rename-format '#{b:pane_current_path}'

set -g set-titles on
set -g set-titles-string '#h ❐ #S ● #I #W'

# renumber windows when a window is closed
set -g renumber-windows on

set -g status-keys vi
set -g history-limit 1000000

setw -g mode-keys vi
setw -g monitor-activity on

# No delay for escape key press
set -sg escape-time 0

set -g mouse on
set -g @emulate-scroll-for-no-mouse-alternate-buffer "on"

# need this to autosave in vim on lost focus
set -g focus-events on
set -sg escape-time 0

set -g status-justify "left"
set -g status "on"
set -g status-left-style "none"
set -g message-command-style "fg=#b4b7b4,bg=#373b41"
set -g status-right-style "none"
set -g pane-active-border-style "fg=#444444"
set -g status-style "none,bg=#282a2e"
set -g message-style "fg=#b4b7b4,bg=#373b41"
set -g pane-border-style "fg=#373b41"
set -g status-right-length "100"
set -g status-left-length "100"
setw -g window-status-activity-style "none,fg=#555555,bg=#282a2e"
setw -g window-status-separator ""
setw -g window-status-style "none,fg=#4f5b66,bg=#282a2e"
set -g status-left "#[fg=#333333,bg=#81a2be] #S #[fg=#81a2be,bg=#282a2e,nobold,nounderscore,noitalics]"
set -g status-right "#[fg=#282a2e,bg=#282a2e,nobold,nounderscore,noitalics]#[fg=#b4b7b4,bg=#282a2e] #[fg=#373b41,bg=#282a2e,nobold,nounderscore,noitalics]#[fg=#b4b7b4,bg=#373b41] %l:%M #[fg=#81a2be,bg=#373b41,nobold,nounderscore,noitalics]#[fg=#333333,bg=#81a2be] #(cut -c3- ~/.tmux.conf | sh -s _hostname) "
setw -g window-status-format "#[fg=#282a2e,bg=#282a2e,nobold,nounderscore,noitalics]#[default] #I  #W #[fg=#282a2e,bg=#282a2e,nobold,nounderscore,noitalics]"
setw -g window-status-current-format "#[fg=#282a2e,bg=#373b41,nobold,nounderscore,noitalics]#[fg=#dddddd,bg=#373b41] #I  #W#F #[fg=#373b41,bg=#282a2e,nobold,nounderscore,noitalics]"

# ►_◄
#
# _hostname() {
#   tty=${1:-$(tmux display -p '#{pane_tty}')}
#   ssh_only=$2
#   ssh_parameters=$(ps -t "$tty" -o command= | awk '/ssh/ && !/autossh/ && !/-W/ { $1=""; print $0; exit }')
#
#   if [ -n "$ssh_parameters" ]; then
#     hostname=$(ssh -G $ssh_parameters 2>/dev/null | awk 'NR > 2 { exit } ; /^hostname / { print $2 }')
#     [ -z "$hostname" ] && hostname=$(ssh -T -o ControlPath=none -o ProxyCommand="sh -c 'echo %%hostname%% %h >&2'" $ssh_parameters 2>&1 | awk '/^%hostname% / { print $2; exit }')
#     hostname=$(echo "$hostname" | awk '\
#     { \
#       if ($1~/^[0-9.:]+$/) \
#         print $1; \
#       else \
#         split($1, a, ".") ; print a[1] \
#     }')
#   else
#     if ! _is_enabled "$ssh_only"; then
#       hostname="$(hostname -s)"
#     fi
#   fi
#
#   echo "${hostname}$(nc -G2 -w1 -z 10.2.0.2 53 && echo ' 🔒')"
# }
#
# "$@"
