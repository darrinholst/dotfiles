#!/opt/homebrew/bin/node

import {
  CloudWatchClient,
  GetMetricDataCommand,
  ListMetricsCommand,
} from '@aws-sdk/client-cloudwatch';

const client = new CloudWatchClient();
const namespace = 'Speedtest';
const period = 5 /* minutes */ * 60 /* seconds */;
const metrics = await getMetrics().catch((e) => {
  console.error(e);
  return {}
});

console.log(JSON.stringify({
  isp: 'âš ',
  download: 0,
  upload: 0,
  ping: 0,
  ...metrics
}, null, 2));

async function getMetrics() {
  const isps = await getAllIsps();
  const { MetricDataResults } = await client.send(
    new GetMetricDataCommand({
      StartTime: new Date(Date.now() - period * 1000),
      EndTime: new Date(),
      MetricDataQueries: isps.flatMap((isp, i) => [
        { Id: `download_${i}`, MetricStat: buildMetricStat(isp, 'download') },
        { Id: `upload_${i}`, MetricStat: buildMetricStat(isp, 'upload') },
        { Id: `ping_${i}`, MetricStat: buildMetricStat(isp, 'ping') },
      ]),
    }),
  );

  const metrics = MetricDataResults.flatMap((data) => {
    if (!data?.Values?.length) return [];
    const parts = data.Label.split(' ');
    return [
      ['isp', parts.at(0)],
      ['time', data.Timestamps.at(-1)],
      [parts.at(-1), data.Values.at(-1)],
    ];
  })

  return Object.fromEntries(metrics);
}

async function getAllIsps() {
  const { Metrics } = await client.send(
    new ListMetricsCommand({ Namespace: namespace, MetricName: 'download' }),
  );

  return Metrics.flatMap((metric) =>
    metric.Dimensions.map((dimension) =>
      dimension.Name === 'isp' ? dimension.Value : null,
    ),
  ).filter(Boolean);
}

function buildMetricStat(isp, metric) {
  return {
    Period: period,
    Stat: 'Minimum',
    Metric: {
      Namespace: 'Speedtest',
      MetricName: metric,
      Dimensions: [{ Name: 'isp', Value: isp }],
    },
  };
}
