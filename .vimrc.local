set guifont=Meslo\ LG\ S\ DZ:h16
let mapleader = ","

"-----------------------------------------------------------------------------
" get the eff out of insert mode on foucs lost
"-----------------------------------------------------------------------------
:au FocusLost,TabLeave * call feedkeys("\<C-\>\<C-n>")

"-----------------------------------------------------------------------------
" auto save files
"-----------------------------------------------------------------------------
:au FocusLost * :call SaveAll()

function! SaveAll()
  try
    wa
  catch
    " ignore
  endtry
endfunction

"-----------------------------------------------------------------------------
" set visual bell -- i hate that damned beeping
"-----------------------------------------------------------------------------
set vb

"-----------------------------------------------------------------------------
" Make sure that unsaved buffers that are to be put in the background are
" allowed to go in there (ie. the "must save first" error doesn't come up)
"-----------------------------------------------------------------------------
set hidden

"-----------------------------------------------------------------------------
" random key bindings
"-----------------------------------------------------------------------------
map ,, :ZoomWin<CR>
nmap <silent> ,n :set invhls<CR>:set hls?<CR>
noremap <silent> ,bd :bd<CR>
noremap <silent> ,bb :BufExplorer<CR>
map <C-Tab> :bu #<cr>
nmap <F7> :NERDTreeToggle<CR>
map ,a :Ack<space>
vmap <silent> <F8> :call Ruby_eval()<CR>
nmap <silent> <F8> mzggVG<F8>`z
imap <silent> <F8> <Esc><F8>a
map <silent> <S-F8> <C-W>l:bw<CR>
imap <silent> <S-F8> <Esc><S-F8>a
inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a
map ,jt <Esc>:%!json_xs -f json -t json-pretty<CR>
map ,xt :call DoPrettyXML()<CR>


"-----------------------------------------------------------------------------
" minitabexpl
"-----------------------------------------------------------------------------
"let g:miniBufExplMapCTabSwitchBufs = 1


" rails key bindings
"-----------------------------------------------------------------------------
map ,rv :Rview<CR>
map ,rc :Rcontroller<CR>
map ,rm :Rmodel<CR>

"-----------------------------------------------------------------------------
" Window Commands
"-----------------------------------------------------------------------------
noremap <silent> ,h :wincmd h<CR>
noremap <silent> ,j :wincmd j<CR>
noremap <silent> ,k :wincmd k<CR>
noremap <silent> ,l :wincmd l<CR>
noremap <silent> ,cj :wincmd j<CR>:close<CR>
noremap <silent> ,ck :wincmd k<CR>:close<CR>
noremap <silent> ,ch :wincmd h<CR>:close<CR>
noremap <silent> ,cl :wincmd l<CR>:close<CR>
noremap <silent> ,cc :close<CR>
noremap <silent> ,cw :cclose<CR>

command! StripTrailingWhitespaces :call <SID>StripTrailingWhitespaces()

"-----------------------------------------------------------------------------
" Auto commands
"-----------------------------------------------------------------------------
augroup cleanup_files
  au!
  au BufWritePre *.css,*.html,*.json,*.js,*.rb,*.feature :call <SID>StripTrailingWhitespaces()
  au BufWritePre *.css,*.html,*.json,*.js,*.rb,*.feature retab!
augroup END

au BufRead,BufNewFile *.json set filetype=json
au BufRead,BufNewFile *.txt setfiletype markdown

"-----------------------------------------------------------------------------
" functions
"-----------------------------------------------------------------------------
function! <SID>StripTrailingWhitespaces()
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  %s/\s\+$//e
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

function! Ruby_eval() range
  let src = tempname()
  let dst = tempname()
  execute ": " . a:firstline . "," . a:lastline . "w " . src
  execute ":silent ! $HOME/.rvm/bin/ruby-1.9.2-p136 " . src . " > " . dst . " 2>&1 "
  execute ":!mvim " . dst
endfunction

function! DoPrettyXML()
  " save the filetype so we can restore it later
  let l:origft = &ft
  set ft=
  " delete the xml header if it exists. This will
  " permit us to surround the document with fake tags
  " without creating invalid xml.
  1s/<?xml .*?>//e
  " insert fake tags around the entire document.
  " This will permit us to pretty-format excerpts of
  " XML that may contain multiple top-level elements.
  0put ='<PrettyXML>'
  $put ='</PrettyXML>'
  silent %!xmllint --format -
  " xmllint will insert an <?xml?> header. it's easy enough to delete
  " if you don't want it.
  " delete the fake tags
  2d
  $d
  " restore the 'normal' indentation, which is one extra level
  " too deep due to the extra tags we wrapped around the document.
  silent %<
  " back to home
  1
  " restore the filetype
  exe "set ft=" . l:origft
endfunction

function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction

